/**
 * redpen: a text inspection tool
 * Copyright (C) 2014 Recruit Technologies Co., Ltd. and contributors
 * (see CONTRIBUTORS.md)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cc.redpen;

import cc.redpen.config.Configuration;
import cc.redpen.config.ValidatorConfiguration;
import cc.redpen.model.*;
import cc.redpen.parser.DocumentParser;
import cc.redpen.parser.SentenceExtractor;
import cc.redpen.validator.ValidationError;
import cc.redpen.validator.Validator;
import cc.redpen.validator.ValidatorFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Validate all input files using appended Validators.
 */
public class RedPen {
    private static final Logger LOG = LoggerFactory.getLogger(RedPen.class);

    private final List<Validator> validators = new ArrayList<>();
    private final Configuration configuration;
    private final SentenceExtractor sentenceExtractor;

    /**
     * constructs RedPen with specified config file
     * @param configFile config file
     * @throws RedPenException
     */
    public RedPen(File configFile) throws RedPenException {
        this(new ConfigurationLoader().load(configFile));
    }

    /**
     * constructs RedPen with specified config file path
     * @param configPath config file path
     * @throws RedPenException
     */
    public RedPen(String configPath) throws RedPenException {
        this(new ConfigurationLoader().loadFromResource(configPath));
    }

    /**
     * constructs RedPen with specified configuration
     * @param configuration configuration
     * @throws RedPenException
     */
    public RedPen(Configuration configuration) throws RedPenException {
        this.configuration = configuration;
        this.sentenceExtractor = new SentenceExtractor(this.configuration.getSymbolTable());

        // load validators
        for (ValidatorConfiguration config : configuration.getValidatorConfigs()) {
            Validator validator = ValidatorFactory.getInstance(config, configuration.getSymbolTable());
            this.validators.add(validator);
        }
    }

    /**
     * parses given inputstream
     *
     * @param parser      DocumentParser parser
     * @param InputStream content to parse
     * @return parsed document
     * @throws RedPenException
     */
    public Document parse(DocumentParser parser, InputStream InputStream) throws RedPenException {
        return parser.parse(InputStream, sentenceExtractor, configuration.getTokenizer());
    }

    /**
     * parses given content
     *
     * @param parser  DocumentParser parser
     * @param content content to parse
     * @return parsed document
     * @throws RedPenException
     */
    public Document parse(DocumentParser parser, String content) throws RedPenException {
        return parser.parse(content, sentenceExtractor, configuration.getTokenizer());
    }

    /**
     * parses given files
     *
     * @param parser DocumentParser parser
     * @param files  files to parse
     * @return parsed documents
     * @throws RedPenException
     */
    public List<Document> parse(DocumentParser parser, File[] files) throws RedPenException {
        List<Document> documents = new ArrayList<>();
        for (File file : files) {
            documents.add(parser.parse(file, sentenceExtractor, configuration.getTokenizer()));
        }
        return documents;
    }

    /**
     * Validate the input document collection.
     *
     * @param documents input document collection generated by Parser
     * @return list of validation errors
     */
    public Map<Document, List<ValidationError>> validate(List<Document> documents) {
        Map<Document, List<ValidationError>> docErrorsMap = new HashMap<>();
        documents.forEach(e -> docErrorsMap.put(e, new ArrayList<>()));
        runDocumentValidators(documents, docErrorsMap);
        runSectionValidators(documents, docErrorsMap);
        runSentenceValidators(documents, docErrorsMap);
        return docErrorsMap;
    }

    /**
     * Validate the input document collection.
     *
     * @param document document to be validated
     * @return list of validation errors
     */
    public List<ValidationError> validate(Document document) {
        List<Document> documents = new ArrayList<>();
        documents.add(document);
        Map<Document, List<ValidationError>> documentListMap = validate(documents);
        return documentListMap.get(document);
    }

    private void runDocumentValidators(List<Document> documents, Map<Document, List<ValidationError>> docErrorsMap) {
        for (Document document : documents) {
            List<ValidationError> errors = new ArrayList<>();
            validators.forEach(e -> e.validate(errors, document));
            docErrorsMap.put(document, errors);
        }
    }

    private void runSectionValidators(List<Document> documents, Map<Document, List<ValidationError>> docErrorsMap) {
        // run Section PreProcessors to documents
        for (Document document : documents) {
            for (Section section : document) {
                validators.forEach(e -> e.preValidate(section));
            }
        }
        // run Section validator to documents
        for (Document document : documents) {
            for (Section section : document) {
                List<ValidationError> newErrors = new ArrayList<>();
                validators.forEach(e -> e.validate(newErrors, section));
                List<ValidationError> validationErrors = docErrorsMap.get(document);
                validationErrors.addAll(newErrors);
            }
        }
    }

    private void runSentenceValidators(List<Document> documents, Map<Document, List<ValidationError>> docErrorsMap) {
        // run Sentence PreProcessors to documents
        for (Document document : documents) {
            for (Section section : document) {
                // apply Sentence PreProcessors to section
                // apply paragraphs
                for (Paragraph paragraph : section.getParagraphs()) {
                    validators.forEach(e -> paragraph.getSentences().forEach(e::preValidate));
                }
                // apply to section header
                validators.forEach(e -> section.getHeaderContents().forEach(e::preValidate));

                // apply to lists
                for (ListBlock listBlock : section.getListBlocks()) {
                    for (ListElement listElement : listBlock.getListElements()) {
                        validators.forEach(e -> listElement.getSentences().forEach(e::preValidate));
                    }
                }
            }
        }
        // run Sentence Validators to documents
        for (Document document : documents) {
            for (Section section : document) {
                List<ValidationError> newErrors = new ArrayList<>();

                // apply SentenceValidations to section
                // apply paragraphs
                for (Paragraph paragraph : section.getParagraphs()) {
                    validators.forEach(e -> paragraph.getSentences().forEach(sentence -> e.validate(newErrors, sentence)));
                }
                // apply to section header
                validators.forEach(e -> section.getHeaderContents().forEach(sentence -> e.validate(newErrors, sentence)));
                // apply to lists
                for (ListBlock listBlock : section.getListBlocks()) {
                    for (ListElement listElement : listBlock.getListElements()) {
                        validators.forEach(e -> listElement.getSentences().forEach(sentence -> e.validate(newErrors, sentence)));
                    }
                }
                docErrorsMap.get(document).addAll(newErrors);
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        RedPen redPen = (RedPen) o;

        if (configuration != null ? !configuration.equals(redPen.configuration) : redPen.configuration != null)
            return false;
        if (validators != null ? !validators.equals(redPen.validators) : redPen.validators != null)
            return false;
        if (sentenceExtractor != null ? !sentenceExtractor.equals(redPen.sentenceExtractor) : redPen.sentenceExtractor != null)
            return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = validators != null ? validators.hashCode() : 0;
        result = 31 * result + (configuration != null ? configuration.hashCode() : 0);
        result = 31 * result + (sentenceExtractor != null ? sentenceExtractor.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "RedPen{" +
                "validators=" + validators +
                ", configuration=" + configuration +
                ", sentenceExtractor=" + sentenceExtractor +
                '}';
    }
}
